'use strict'
//例題1：円周率を3.14としたとき、半径（radius）が5の円の面積をコンソールに表示するプログラムを書け。
//
//例題2：0から100までの間の数を順番にコンソールに表示せよ。ただし「0は偶数です」「1は奇数です」などというように、偶数奇数のどちらであるかについても表示せよ。
//
//例題3：西暦が与えられたとき、昭和ならば「西暦xxxx年は昭和xx年」、平成ならば「西暦xxxx年は平成xx年」とコンソールに表示するプログラムを作成せよ。ただし与えられる西暦は1930年から2018年までに限るとする。
//
//例題4：2の累乗の値を、0乗から5乗までコンソールに表示せよ。なお累乗は「**」で計算できる。
//
//例題5：数値で西暦を受け取り、平成の数値に変換して返す関数toHeiseiを定義せよ。また、その関数を使って実際にいくつか変換してみよ。ただしここで西暦は1989以上2018以下とする
//
//例題6：2つの数を受け取り、その差を返す関数subを定義せよ。また、いくつかの数値で実際に関数を使用し、結果を確かめよ。
//
//例題7：整数値nを受け取り、0からnまでの整数をコンソールに出力する関数printNumberを定義せよ。また、実際に関数を使用して結果が正しいことを確かめよ。
//
//例題8：配列[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]と配列[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]を作成し、それぞれのi番目同士の和を配列sumのi番目に格納せよ。また、配列sumをコンソール上に表示せよ。
//
//例題9：新規にオブジェクトrectangle（英語で四角形という意味）を作成し、rectangleに、width（幅）プロパティとheight（高さ）プロパティ、および自身の面積を計算するcalcAreaメソッドを追加せよ。ここでwidthプロパティとheightプロパティの値は任意とする。また、calcAreaメソッドが正常に動作することを確かめよ。
//
//例題10：半径を表すプロパティradiusと、面積を計算するメソッドcalcAreaをを持つクラスCircleを作成せよ。また、実際にいくつかインスタンスを生成し、面積計算が正しいか確かめよ。ただし円周率にはMath.PIを使用すること。
//
// 例題11 : 空の配列を作り、その配列にランダムな数値100個を格納し、ひとつずつコンソール上に表示せよ。なおランダムな数はMath.ramdom()メソッドで生成することができる。
//
// 例題12：プロパティとして実部reと虚部imを含む、複素数を表すオブジェクトを作成せよ。ここでreとimの値は適当なもので良い。次にこのオブジェクトにメソッドtoString()を追加し、’5+3i’のような文字列に変換する機能をつけよ。また、toString()メソッドを用いて実際に文字列として表示せよ。
// 例題13：生徒の名前と数学の点数を格納した、以下の配列が与えられているとする：
//const scores = [
//   { name: '田中', math: 67 },
//   { name: '鈴木', math: 92 },
//   { name: '佐藤', math: 51 }
// ];
// このとき各生徒の成績を「田中の数学の点数は67点です」などと表示せよ。
//  例題14：以下のような本を表すクラスBookと本棚を表すクラスBookshelfがある：
 // 本を表すクラス
//class Book {
//  constructor(title, author) {
//    this.title = title;
//    this.author = author;
//  }
//}
// 本棚を表すクラス
//class Bookshelf {
//  constructor() {
//    this._books = [];
//  }
  // 本棚に本を追加するメソッド
//  addBook(book) {
 //   this._books.push(book);
//  }
//}
//このときBookshelfクラスに、本を検索して初めの結果を返すメソッドsearch(query)を追加せよ。なお、検索は文字列queryがタイトルか著者に含まれているものを一致したとみなす。また、実際に本棚にいくつか本を追加し、検索が機能することを確かめよ。
//ヒント：ある文字列に他の文字列が含まれているか調べるには、’文字列’.includes(‘他の文字列’)を使用する。

//例題15：二次元ベクトルを表すクラスVector2と、複素数を表すクラスComplexを作成し、文字列表現を返すメソッドtoStringを2つのクラスに追加せよ。また、実際に各クラスのインスタンスを作成し、toStringが正しく動作することを確かめよ。

//例題16例題：Math.random()でランダムな数値を100万個作り、配列と二分探索木に数値を追加せよ。次に、配列と二分探索木それぞれから値「2」を探し、探索にかかったステップ数をカウントして表示せよ。

//例題17：大量のランダムな要素（1万個以上）を持つ配列を用意し、バブルソートとクイックソートの実行時間を比較せよ。

//例題18：スタックというデータ構造がある。スタックは配列のようにデータを蓄積するが、積み上げ（push）と、一番最後にpushされたデータの積み下ろし（pop）の2種類しか操作が存在しない。Stackクラスを実装せよ。また、Stackクラスを実際に使用してみよ。
 
//例題19：ソート済みの配列があるとする。このとき、配列の中からある値を探しだす方法として、二分探索（バイナリサーチ）という手法が使える。
//配列の真ん中の値を見て、同じならtrueを返し終了する。真ん中より小さければ左半分を二分探索し、真ん中より大きければ右半分を二分探索する。
//最後まで見つからなければfalseを返す
//これを実装し、動作を確かめよ。


