'use strict'
//課題1：0から23までのいずれかの値である整数hourを考える。このときhourが0から11までのときは「午前xx時です」、12のときは「正午です」、13から23までのときは「午後xx時です」と表示するプログラムを作成せよ。また、hourの値を様々に変えてプログラムが正しく動作していることを確かめよ。
 
//課題2：1から100までの数をコンソールに列挙せよ。ただし3の倍数のときだけは頭が悪くなって数字を出力できないものとする。
 
//課題3：日数dを受け取り秒数に換算した値を返す関数dayToSecを定義せよ。また、いくつかの値で計算結果が正しいことを確かめよ。
 
//課題4：整数limit未満の素数を列挙する関数listPrimes(limit)を定義せよ。また、実際に関数を利用して出力が正しいことを確かめよ。
//ヒント：関数listPrimesの中で全て処理するのではなく、素数判定をする関数isPrime(n)を定義し、listPrimesの中からisPrimeを利用すると良い。
 
//課題5：数値のみを含む、同じ長さの配列arrayAとarrayBが以下のように与えられているとする：
//const arrayA = [1, 3, 5, 7, 9];
//const arrayB = [2, 4, 6, 8, 10];
//このときarrayAのi番目とarrayBのi番目を掛けた数値を、新しい配列prodのi番目に格納して、配列prodをコンソールに表示せよ。また、arrayAとarrayBの値や長さをいろいろ変えて、計算結果が正しいことを確かめよ。
 //ヒント1：配列prodの作り方は、あらかじめarrayA.lengthの長さを持つ配列を作るか、空の配列を作成してpushしていくか、好きに選ぶと良い。
 //ヒント2：例えばprod[0]にはarrayA[0] * arrayB[0]が入る。
 
//課題6：プロパティfirstNameとプロパティlastName、およびプロパティfullNameを持つPersonクラスを作成せよ。次にPersonクラスのインスタンスを作成し、fullNameをコンソール上に表示せよ。
 //ヒント：Personクラスのコンストラクタはconstructor(firstName, lastName, fullName)でもいいが、constructor(firstName, lastName)にして、fullNameはlastNameとfirstNameの結合で算出することもできる。
// 課題7：課題6で作成したPersonクラスのインスタンスを、配列に3つほど格納せよ。また、格納したインスタンスのfullNameを順にコンソール上に表示せよ。
//課題7：通貨を変換するクラスCurrencyConverterを作成せよ。CurrencyConverterはメソッドdollarToYen(dollar)とeuroToYen(euro)を持つものとする。ただし1ドル＝110円、1ユーロ＝135円とする。また、CurrencyConverterのインスタンスを作成し、正しく動作することを確かめよ。

//課題8：キュー（Queue）というデータ構造がある。キューは値を追加するenqueueと、一番古い値を取り出すdequeueの操作を持つ、一方通行のデータ構造である。Queueクラスを作成し、実際に使用してみよ。
//ヒント1:：キューは「待ち行列」とも呼ばれる。早く並んだものほど早く出ることができる
//ヒント2：JavaScriptの配列には、先頭に値を追加するunshiftメソッド、最後の要素を取り出すpopメソッドがある。

//課題9：配列の値を大きい順（例えば[5, 4, 3, 2, 1]）にソートする関数を作成し、適当な配列で動作を確認せよ。使用するアルゴリズムは任意とする。
//ヒント：ソート時の比較を逆にすると……？





